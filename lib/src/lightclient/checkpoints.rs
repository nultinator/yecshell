pub fn get_closest_checkpoint(chain_name: &str, height: u64) ->  Option<(u64, &'static str, &'static str)> {
    match chain_name {
        "test" => get_test_checkpoint(height),
        "main" => get_main_checkpoint(height),
        _      => None
    }
}

fn get_test_checkpoint(height: u64) ->  Option<(u64, &'static str, &'static str)> {
    let checkpoints: Vec<(u64, &str, &str)> = vec![
        (350000, "000cdb1eca1bb84e799e73a32a649a1eeec0a1a563d511dfaceaff69a8006527",
                 "017f968fad6321e5dde81a4d88a17d262193efccdbfd446f697e2775d25c0b2619014da62eafffb89e4766facabab67199c7fd37c14889d0cce6f9daf96f170ac0060f00017eeb2a8556c7714cbc2502ef958723c1491db8008c9f06858342096880c8333b0139bdb820c2339826cbc6ebc3e8ede79004f865d4d48233e74e21d0cf4821163200000001aac1d37ab43d4417be4e222962eadd77eff4a7475ef30dbcf45618c6da1c581b01ecd7df0652ebb31ec6ca03236491e5c77c4a9de6511ee2894ae09da1a7002b36000146539f39a920f96ffb9727f94721e26b73fd66aa63125c5a4f2884ecb4c9b11b000001dd960b6c11b157d1626f0768ec099af9385aea3f31c91111a8c5b899ffb99e6b0192acd61b1853311b0bf166057ca433e231c93ab5988844a09a91c113ebc58e18019fbfd76ad6d98cafa0174391546e7022afe62e870e20e16d57c4c419a5c2bb69"
       ),
        (550000, "04c99687df30181730a1b74d57b48f97c0df1b96bb8fa7d7a23ad1720df382e5",
        "01278664cc8d581b2166cd1e1a06f87a129ca5f61575c197bf0bd979d5ac67d86101f4c1bcce00980181992cf16e481101993b258b32900426e105875bd362061c11100000017c9221fd0e10d6e46408ca079ed4d092575c01bab99760279d91a2a09de0e2260131d421582772779cebaa8260c561efa6b8141a4462b4f3944d43a250ccac993500014a41278ad3e79d44f6f92ab03dddf36ca1e02ba5b44e95f3eaf0a593d22b2c0601d8dd3c19ca05b36d4202687231d6610123d95fd6edfeccd2a61560c6dd059e58016a4238f1516a6708a8d75b06893f0201774418532b5dfc1ff1fbec670a19a54201e760ce8e5824fa9a2ae70b1ed7ecfad4c1cd2a6e9de352c29dd4013118147138012b4d55158f064e6936206f357e26afa909ba1fd7e9cdeac62eb4602603df5f6501b98b14cab05247195b3b3be3dd8639bae99a0dd10bed1282ac25b62a134afd7200000000011f8322ef806eb2430dc4a7a41c1b344bea5be946efc7b4349c1c9edb14ff9d39"
       )
    ];

    find_checkpoint(height, checkpoints)
}


fn get_main_checkpoint(height: u64) ->  Option<(u64, &'static str, &'static str)> {
    let checkpoints: Vec<(u64, &str, &str)> = vec![
        (600000, "0000001b96cc88ed39865b79c0dbdee999e1252a56513e80f74d4147939bf451",
                 "01d3b69d0899d3b2a812c23def0c09aa7632cb0ec593299f4d8d6e545c36633f2f0011000001e162ba7da5a70ebaa528daf12cc93a2464385c19535ad18b79a71008746a176f01a5a8ce3bbd869afaecd611b25018ab16b53f5c7a8588846fbe26b5a66bbf7f540000012d365453fb59308f9c9665b294eb17293164c2cadad9e0c53d884e98e518b5410184b46404d973caa91670a844d689ca97f844b977dfe56c67ca1f0b4aaa2ab94200012be72e31d7db1eb1bff8c63308bbb70b8bdf597bcc8cfe9fe0e3cec0445e8d65000001e9dd3cb1e65da85f7e4dcd5479cb45a155a28795a873fa340b25a8b484ccc938019a7b8494c6dac00c1180ec6fd6765edca4f9616bcb5b1c0f8c58943dbfd93c380000011bcc61d2d87e7240c21da5f0f85fdb2d9b1806bf155da92e8f0d4de23932da08"
        ),
        (630000, "0000001efec70b964d24382dff9436138291a0d29f0b2b37b9dc8e58187394f2",
                 "017e8b229c7f044b36a2f48da5c22955a9946f359818e1ee4f732e667fd0d50e3901c28397689f303da38cdccd740a542448052412e7d754b9ffe1828f7dd189b06211013f0bff67ee94046cfaad7b4562d5b4df8963b8e63445da4c2feaa3cade0f381000000000000115430c28919a755d22d52f03a63f52f89836132c48408b4500701c15cfdf895701f85eb4113a04a0c2ae3000493a09c44dbf6109ab9a72e3a70ba6b5e456a4280801626934e496c6bf071a45a722dfa3e0f7e6fe0e603d3c3e47efeeb1857e09690c0109d3c48b603a268505a5feab0db03af45ec59004ab1a221f1c92de65386a7d270001a86112ac94164cfa2f7a8bc8c70aa90c0c2f4bfad1c830ba3b30a17828b0f60e000000012bba14d7832c159b59f38f986d3ecd69cf86440efa04f8946c64cbdb5d269e70011bcc61d2d87e7240c21da5f0f85fdb2d9b1806bf155da92e8f0d4de23932da08"
        ),
        (640000, "000000739c049682cd007c3948463a549826aa3e6ef1b37b4612e393300454c5",
                 "019db835c0b09f5c8a33fac7d1c24c209885c18f09f182a168ba213b4a32dfb458001101cdd1735b6bef1f93d202c68bd9dc682bb207c4dca665388a8f743c81adb65f2101696d7a939a178edf4abd3dbd818638137a9408d6dd9701a5d42384e2e840634a0001760fcea9bc08cd0208041243d2b002d745dd833f5ca00b8897493c028f544c0201da1db81f7edd08d84bfce89a7559886f7f75422a5f24ae291c43a7fd460d3f51000186b7536a6ce92e657314918b63ec248104c42ba89efdd6d3704089256f956461016d2b5023b453912969bdd54147c423bda1bb86fedd0f652d7c8372f115d8bc6d01812771731f4544301f63813eb327aeada5b85ad08758186262be6d3bb45bc6230001cf76112e4d7da1d2da4cf9d5d2196886689713c84d3c7ffd07533f7854fb31090000012f478cbd674cdd5b04b4e48edbeff3bee25062e113257a0c41d6ffd973a00e5a00012bba14d7832c159b59f38f986d3ecd69cf86440efa04f8946c64cbdb5d269e70011bcc61d2d87e7240c21da5f0f85fdb2d9b1806bf155da92e8f0d4de23932da08"
        ),
        (660000, "0000003286e3442869e5642f4cea39d87a5d4f32884a3195bafe2742a4be98cf",
                 "0169873338d1915d522b88e8281f3a64e9f48701c612caa8c411e3ebfe5bff083b001100018f9ee18e20c4428767cc11c28959e5220eb121d8c464f34b6c9ac05658aa972701d5997e34da81e6825e11d577cd04e9d89b0bd57f91be9dc7f891420301360c2d0149ab15a8cf93122c5e7b1da9682db800df3325985cae7d5d45afc320b3ce0045000195b300d85aa5630caabe4cb20b270d119a22e4eba44447c1582cbc46896d2621016eb38ec2f1e6df9749f4982d4137bc9c3380481d89ce62bc06a3b427eca98c31000001bacb01d531165f74a6e8cf1b76f6cac2ad41850600a8b9e172ef7b49f40624330000019f3b513e80a5b8936b8f991776ae2a9846672e7063efb57dec38a7af7afa3a720001becfb5861740e4d88e7a2adaba26125573d022adab2a2f8c457fc89f4d6c7a29012bba14d7832c159b59f38f986d3ecd69cf86440efa04f8946c64cbdb5d269e70011bcc61d2d87e7240c21da5f0f85fdb2d9b1806bf155da92e8f0d4de23932da08"
        ),
        (700000, "000001af200fda6d5778b8cdaf16e20c3e14da185e650efc9957b4bd73febbbc",
                 "0171b8ca66940c6287c5fe5673f5cbf88956f38246d736b0ed206e55644f153c5000120000000000011cfcd5b1c30cfa8868711c07cb77d2dc965716bed4ec55b52399108ff991b8430001c2b1d5fe1c648213f1aa816299990cf7f778186eb27941ef0c925d2a88cc912f01f28c52d13ef0be90f00dad5dadd597a627b70dcbbb20b4befa206e2210a4425a00000000016271aa76ac4f7f0548240b1b986c74b4c9350a2e12f46a5f9fba4b506a22834c000000018eb53ce1887c107647dd26dcbccb81844744a0f42a9f262d5f2cc6253a27ef6c"
        ),
        (740000, "0000009c8788f2cc05c491885d04ba7f69a767e1483cdac39a90d40b9217f44e",
                 "0181ab8ffc3eddcab5f30ff537658e5821b953004a6212ad276a466c6ba80e9112013c03721457c3d9fd6aebcc55d3664f577334b30d4042324959c715cb839d8949120001a9ec4ba32f6e5f089a2387e35449feae02596de4adc983aaba07b8a8afb1302d016265f2f33c9779d49f5413929e17cc5f6dbc3fc2d459cc073864671d7cd3cd3c01bf0ebff0f85e9202e5348391ea9bdc99eaf50f986b1e85d0fae5a6f9d8b2c42e0189a3781fcb1af5e09d6c62f68890fd0a18950ab5c5143e8184c3a7de1f8524220001532ae473cce9c10118078868098cf0e360478cfc893cb408a61b43e694bf851501f57e9ef590a1ce440575a79bb5b33c1aeac155994fffb0b4d1286d2400144e6601a539a6658e4e190abdebbe7a1488a2922f0cf1c699ace0cce192683586a2fe37000000000144ae242cf457a8dc1c783875b0028007fd1aa28187e6f254e1b6fe8b6b66432a016e887902f0da198f0978df6a2532046166bee9e57713216166b34b75f2b1e1690000018eb53ce1887c107647dd26dcbccb81844744a0f42a9f262d5f2cc6253a27ef6c"
        ),
        (750000, "000000bf27f6d83663c98fe7ab389f4398b7dcea914cc1f4681fbc1761bf920e",
                 "01b91956236e4bd153ed5907007c010ba62642c3db0635ce5d494bd297dfec500b01721430517f9bcd496e535c3d6d7e48795672ecf53a2f95457b8416aee870a34012016db29401f59aed2230190902e986c5939bca9e909d02976efc09ce2452bcd9260142776849073d7f8b247c7e51a18743491b0b9ffc8b5445960749b529cad84c160000000001dea26b1c2ed8d905e40eaa203f35c5e6a3e036bdb8b207733524df1bec2ad3240000000000011138a2ffce19a397558c7ad7a374ad1f549ec702737a8bf70f9dea6d9d6a50710144ae242cf457a8dc1c783875b0028007fd1aa28187e6f254e1b6fe8b6b66432a016e887902f0da198f0978df6a2532046166bee9e57713216166b34b75f2b1e1690000018eb53ce1887c107647dd26dcbccb81844744a0f42a9f262d5f2cc6253a27ef6c"
        ),
        (760000, "000000c90235ab52ff3191425ada972c253b67c6b35a71d882cfebea7bcc5bb0",
                 "01fcdd15fa0b734bada99b72eb7d98abb4cd7f87c355f880f604ccb8f3b864802b012ce5ca9d3b1fad6f486007ba763c2e3bd1fca762b3c181cd4f59e9888f277455120001dfa906630526d66678fe47e57f3ec711d66f1e09382f2bb07ce3f00d8c62af6e01d6365b636eb227d0b8a2de7de12534d89231dfac709bcf1171e4f19d6d989a38016e0cff2a95d369853c2999a5cb2c9808933057fbb486007e069bbdc395261b4600000000000000000000000198704029f024f7b2eebf8227f4b2373a114fb2f6b940e187fa82092451ac777100018eb53ce1887c107647dd26dcbccb81844744a0f42a9f262d5f2cc6253a27ef6c"
        ),
        (770000, "0000027a9d401b269a295d1e410ae6bb958c72dc3e6d44dd58a8aca2a24f0941",
                 "01ef746ca524dc68179ca14816e0e356a8f45dd3838383f2fe2804e28e4f2178270128bc95586c3354a2d241023756b57cf75bb9649347363ee43718d2a6b39640421201155b292a3dacbb9d91c411d75666d3b7f3d0ac7d21ca0d2da9c0d9922ead914f01c82441882282a0215490abc8a4a3fd4ca21765823c855af145f59276be73af3d000143f1aa45ffca7461038e3c8dca8229ea11ff0a5630be99d8d82de3c17147fe44000001ec2dbc29241a37ccc26ffb64b8f9a263c193abd9be5c59db1850f1d02e3fba6101f730a8b2c979c8788de0d06d9f44c2bd1df0fe7df9755ffa87f569f1deddea3a00000191cbfb3a3188c8615c0a6b746178e587063e7eea0e2c7ff9770337e0955d7b6801b8315921862998ea151c689a0b4b3fdcacbe75b85eeedfec9044c56e49e6543d0000000198704029f024f7b2eebf8227f4b2373a114fb2f6b940e187fa82092451ac777100018eb53ce1887c107647dd26dcbccb81844744a0f42a9f262d5f2cc6253a27ef6c"
        ),
        (780000, "000000f930de57a8b374a003bc2cd36fadb3134395d8f5a5e9802f406b7039f1",
                 "018c009a208a4266128859d5cc99c28b461bdc01d1187c52403699984b1ce49659016f42bd772da03efc69de0c0b7b4b0982db217d14ca463049ac57613cf42cff121200000000000000000166fdf0ed0670d7fbb7700d51ff334cb540e93eec2cec49eb4bb29573b0e5f6430000016dd59710b1f9a7dfc0fe567bc0e382cd460d953bdb20c27b80eec6088a34de55018769ffcc9bccb6798122f3b40cc05a30a8823b702559fd262da36dd52df8c46700000198704029f024f7b2eebf8227f4b2373a114fb2f6b940e187fa82092451ac777100018eb53ce1887c107647dd26dcbccb81844744a0f42a9f262d5f2cc6253a27ef6c"
        ),
        (790000, "000000f3f04be1b9303733e3d774c8ca46c04e57382734561e807758c62b9f0d",
                 "01c6b07e53da26e2f608893ad090b3556f294220d625ff3a0f0f45ff34d8ffbf35001201b1b6d4d951e82677eee45e16e76dac7c2b96a4cd3f335941df6e8bb287def8520131d881219e8037d2eeec449614fbc8db28d4467720355bcf1081ee34618bba1901db88abe7c37af9b5b34adf2f0903616220dcf71d0791ef57bb117a276fd8290600017472d17c1e320aa0495887790aec508100ee14622a409bfdf76e844fd08e6d0d0001f51f7b230f0e350b3c1477478830e6b5770813aadd63dac0fe194edf0cc5b04f01df295f9765a6df8a3d690fa9287ab9e12d1f136a79fec654e11eda3a7aa0a10100016dfed64cc2df477c06154146c3b13a54cfadb0066571ccfd490b03492f39410301b1a5b9a7fd3558c2d416132a88999f9c94c2257f83d5fed9ab21e0898b9ff743000001c56f286bdc7c811724e640e07972251e4419bd25a49e0795ec665a9f5c49a057000198704029f024f7b2eebf8227f4b2373a114fb2f6b940e187fa82092451ac777100018eb53ce1887c107647dd26dcbccb81844744a0f42a9f262d5f2cc6253a27ef6c"
        ),
        (800000, "00000128337587c71c9dfc315d5b5426ed433f49f6c2944e929bdf641e2de5b9",
                 "01ac4a29594ca8a84d0b2361c0746f0c19a5d36bf1cb1df4ead0b36a3c2742821f0012000120b7680f9db173305b30578c51e08b4b2ab855035255508797ae610cf0d7ea0901347cb878f509fdd600007ade50a88bf2562fe768625f1ae0755faa97508dda5001bf6ce2bdeed8993e971bc36565263d69edf93ecb17b32da23cbfdabb0415cf4d012fc4b00ed0dd90e09e61cfe4513d6bef10c0d6946fab2333b47b8f6b6dc4e25f0001814f1782485cc0bc13507e39b668f46fe59c7efbb198a793e6a776941b97c33f01344e0bd4d80b5143f21fc188861df5b119602e8f046dd528cb188c08e1594017017a0c75e87f1115a7536fbdc4934e89e5cda9a22e28e4ba53e95711bd3192135601dcfd99b013cfdce9364a0655f363bb6a52454e3123aa3038417130a1c32c713a000001e32b59d9f676b39551541fb910868abd1e84f6ad26cbdcd307cbfac91d6b231001c56f286bdc7c811724e640e07972251e4419bd25a49e0795ec665a9f5c49a057000198704029f024f7b2eebf8227f4b2373a114fb2f6b940e187fa82092451ac777100018eb53ce1887c107647dd26dcbccb81844744a0f42a9f262d5f2cc6253a27ef6c"
        ),
        (810000, "00000386a03475eb88737c1a02de62dfa35ab5a57d1405d3e567a067caf1cb5d",
                 "018a957ae5d17d43114d4555cd25428e8926e89e823c139c1d6924bf3e021e1e500150bc39f810fba67b4ad5727b1bb074d53b82db0d63ca52678bae16c7dab5a1141200000001c744073036e6017a3be92412123bd5e317fe7affa32f97e7ef11e928d4af8e6700011dd6b6854ec2f38bbdb767f073663d50c251f7e2628269c26e0c7bfbe8d44e1e01b054a61f494647231a2a082a62d2b0b164bf451872a6612761f1065330a0c74f0001e9658657b5350fd52f65b7b74a424000017a4ee253c17b86b129592103670617000000000001b27169a2dd40d22255241b457208bd1391a9a5c47f0d2832e5a97a37308a200e0198704029f024f7b2eebf8227f4b2373a114fb2f6b940e187fa82092451ac777100018eb53ce1887c107647dd26dcbccb81844744a0f42a9f262d5f2cc6253a27ef6c"
        ),
        (820000, "00000094ec1ff11db02d1f8824658d9ed62d9236174054c67817384d8e452666",
                 "01de81987205a52b6439de3b44728d403256181171169ea4e0a7dba21fde11dd3a001200015ee5b79784d56f7ec787c1ab281fbb1768fa8652e0d3a05115fc83b3318d300b014ab2653233127b565902da84d97464d7db5211428f6398acd2cf621b1183ed25000001f28528967ff89bde5d97ba56a066c86b20625e5bdd777119e2f4f4f5f5a7b95d0171287d0866d7d74ce40cb932b720ae6fb567641e1c863134a8fd8eefc7b7405900000001fed3884869b070e440d9e3569b40700709f1a2f2e658abf5489928d5f051b65301c76809d5f86979e27f3a91b47d2fb71b34141454db0314740f23ec58bf183e14000001b27169a2dd40d22255241b457208bd1391a9a5c47f0d2832e5a97a37308a200e0198704029f024f7b2eebf8227f4b2373a114fb2f6b940e187fa82092451ac777100018eb53ce1887c107647dd26dcbccb81844744a0f42a9f262d5f2cc6253a27ef6c"
        ),
        (830000, "000003d91138da8100e719af7a2bda7de219664c026195c5a020d506e60b1439",
                "01a93c8e73f2f78612a9e5f675483bea80ef8bbe161fbb48ce74c92421ce79a6260113e75bc76d44464bbd117ae619ba6924e9ebf797a919c9ef611db74e96bbbd1b120000016871c72876bc44200d711b395c8abac6497d40998fc36c60b1a86ad9ed7a4d6700010e23f2f82dea576d3375d6abe29fe27a8dcea5decaf88172b5c451b525ed972f0001965c9d7bdcb8950655e3699768583173647f1b1e44b551c2a5cb5483763d354d000192fa092ebaebb4db2992d40bbe20268d5bb7938ab0cdf6b16a01e48434797c1d01f15628e83ff5989e64803a91494e10374f2fadf4234fd183a9ba06bee385194801d14fb880b42c2bdb046a4a93dfd0f7e702983db87a201e92de9824f96d7a6f0d0001c303d4a0f1fe259cd8b1b3f4ba2e812b7ed241b88e8c21e94bdd32a1920d5c100001b27169a2dd40d22255241b457208bd1391a9a5c47f0d2832e5a97a37308a200e0198704029f024f7b2eebf8227f4b2373a114fb2f6b940e187fa82092451ac777100018eb53ce1887c107647dd26dcbccb81844744a0f42a9f262d5f2cc6253a27ef6c"
        ),
        (840000, "000000828411935e78da70ef834cc1cbdfff62fdfcd9ea1d2ad5db62055138d2",
                 "0196a05a0af16257fa63fca7b679ea395250075907a6b7de0a5c67bfb743d2d83c01a9f72a1a8a5e2b2a6e0c56044ed9515efd120c31b8bb89dc831e2fecadc5756a12016359978e6e39c2b6c086ac43a665bf474de1ffdca09fe6e4b0656ab7e27cc01f000001a26b4c1c35442d82773b92ca83cc686a66db9b7d8de319e8e7c7fb6f22bd1871010f5509157f2e5da9899435b430ec2756f52c9adbcf5feeffee278e22a9e5505201fa9d1a459498828414c44027b1a5dbcfac4559e8199e2ed59de4fa9b4ee1401200000001c9efe8d19b4b9fd4ac7c5efa1d3ce90ed56628c9a12767e62dadbbd9beafb3120000000110766f460c2f0e07ac6b923b1d58e2e07c8580dc7a2a5199aca0764f99507c1801b27169a2dd40d22255241b457208bd1391a9a5c47f0d2832e5a97a37308a200e0198704029f024f7b2eebf8227f4b2373a114fb2f6b940e187fa82092451ac777100018eb53ce1887c107647dd26dcbccb81844744a0f42a9f262d5f2cc6253a27ef6c"
        ),
        (850000, "00000125e638712689e2edec2c11ce92fadfc5a5b0f124467ae28c371e5ff2db",
                 "0176c1b13962e36b778846fb7b928052493e360374c9a7935d91e27461e03fe5410012016547585fa14e30289620066f966fc8909d6cfa98a3951245ca82e00d09d4d42f0000000000000192ab0a7d24a5e2b33b883bb5902c930955e6b1661a5e2c3f12eb22cf06ee24160001b364166d2f15d048f8e3cef1a3b956b41e24a285a4fe64008a3e217c2a212e6c01bbb386efc9bee072f134850a4f733baee409a9d7a3aee0735c24ed403389c91c01e302a59450bd9dcc5cae32ff60bb7912578f3c9e99de8ffca28adc2f9372e03f000110766f460c2f0e07ac6b923b1d58e2e07c8580dc7a2a5199aca0764f99507c1801b27169a2dd40d22255241b457208bd1391a9a5c47f0d2832e5a97a37308a200e0198704029f024f7b2eebf8227f4b2373a114fb2f6b940e187fa82092451ac777100018eb53ce1887c107647dd26dcbccb81844744a0f42a9f262d5f2cc6253a27ef6c"
        ),
        (860000, "000000627a62cf720315df6efe45972535f0f171754bb0c455fa62509a23ff6b",
                 "016c4a31df00b4315de6d8260a7dd197de3837e1ee469efa04900f500e2b36dc290174cd1b026a2b273527b531305ec0fc84f2109c0e7818ed3643793569acb0c33f120141e3c691f4b978605f905be85b3bc65ab2ce74d396c6ae653d631d51180c671c01c2a6e939539d41b481b1d2dbdf11742dd38d9d7fdc5b900fe4a143634f90446601a5221416a43981799067de9d68323a3bf3c16ad742f5a1af4038e4d4267eb73200015cebfe02640d16ba70cd6d7e595b4786df29cbb0256d23e83a20324ccea42f0e011d80cc2f2e012bf701091ae3afa080828d4a8feea5505a208bc5619e987ad15b0001d2936507e12f4e74d2482bbb567e09684236c4af6bae6c4160786f9d4f95443c0193a462b3755fc083cbee20243e607aaba18ccdbab98422ea93676d85a4ca72010000012b92b89acd592fcd4cf548be39ef706390f49d264e6de82c68ebf69441af120b018f83e99e9f45324a1ad657ba8c7fcce7dc27e9337fbacc2c9c5aff511bca3e430110766f460c2f0e07ac6b923b1d58e2e07c8580dc7a2a5199aca0764f99507c1801b27169a2dd40d22255241b457208bd1391a9a5c47f0d2832e5a97a37308a200e0198704029f024f7b2eebf8227f4b2373a114fb2f6b940e187fa82092451ac777100018eb53ce1887c107647dd26dcbccb81844744a0f42a9f262d5f2cc6253a27ef6c"
        ),
        (1080000, "0000000001a6faf5681b8565d50145fd84547b534c5f869e77cb802518d14341",
                "01f3955ce270f5718bf68883ed37b3b9d2de8fd77be7bd95334fbedc6083f16026001200000001bd5dd7584bc157cebc9d63c7ee761ab453892482246aae3ef9db17de80b84a4b000195fa995a764f9afbd6c14984dbc72175f49f2259bcf0abc4a82ac92446532c44000168fb4180546c77370ff4175d40a29c357e5787f820e383028243ba623fce4e61017cd28108a3c64a8923444af9b7409eb5dda47d8536cf5aafc80abf62e9551b3501fc0832fb90a473de0da1ae7f62b03d547655aa82d1f279c5ab5a997d6472085901647f2444d093ad8668eac738fe0ff6b59b8191bcbc13dc53f581e64de755122a000101e8d7f1b32b8bc1ec539b93f6c2912c839a55c36c509711340a5cf6d1803a360103bcde16c3ed62026afcdeb7c33c7aae0bbaaa357e8d67a10457244bdacabf4f0001891b1e6bfec42e97c79ec505c7ae1b584cf47d4ed8f6cdfcad815b02a5496f6701b7fc5791e3650729b7e1e38ee8c4ea9da612a07b4bf412cefaffbab7ac74c547011323ddf890bfd7b94fc609b0d191982cb426b8bf4d900d04709a8b9cb1a27625"
        ),
    ];

    find_checkpoint(height, checkpoints)
}

fn find_checkpoint(height: u64, chkpts: Vec<(u64, &'static str, &'static str)>) -> Option<(u64, &'static str, &'static str)> {
    // Find the closest checkpoint
    let mut heights = chkpts.iter().map(|(h, _, _)| *h as u64).collect::<Vec<_>>();
    heights.sort();

    match get_first_lower_than(height, heights) {
        Some(closest_height) => {
            chkpts.iter().find(|(h, _, _)| *h ==  closest_height).map(|t| *t)
        },
        None    => None
    }
}

fn get_first_lower_than(height: u64, heights: Vec<u64>) -> Option<u64> {
    // If it's before the first checkpoint, return None. 
    if heights.len() == 0 || height < heights[0] {
        return None;
    }

    for (i, h) in heights.iter().enumerate() {
        if height < *h {
            return Some(heights[i-1]);
        }
    }

    return Some(*heights.last().unwrap());
}

#[cfg(test)]
pub mod tests {
    use super::*;

    #[test]
    fn test_lower_than() {
        assert_eq!(get_first_lower_than( 9, vec![10, 30, 40]), None);
        assert_eq!(get_first_lower_than(10, vec![10, 30, 40]).unwrap(), 10);
        assert_eq!(get_first_lower_than(11, vec![10, 30, 40]).unwrap(), 10);
        assert_eq!(get_first_lower_than(29, vec![10, 30, 40]).unwrap(), 10);
        assert_eq!(get_first_lower_than(30, vec![10, 30, 40]).unwrap(), 30);
        assert_eq!(get_first_lower_than(40, vec![10, 30, 40]).unwrap(), 40);
        assert_eq!(get_first_lower_than(41, vec![10, 30, 40]).unwrap(), 40);
        assert_eq!(get_first_lower_than(99, vec![10, 30, 40]).unwrap(), 40);
    }

    #[test]
    fn test_checkpoints() {
       /* assert_eq!(get_test_checkpoint(500000), None);
        assert_eq!(get_test_checkpoint(600000).unwrap().0, 600000);
        assert_eq!(get_test_checkpoint(625000).unwrap().0, 600000);
        assert_eq!(get_test_checkpoint(650000).unwrap().0, 650000);
        assert_eq!(get_test_checkpoint(655000).unwrap().0, 650000);

        assert_eq!(get_main_checkpoint(500000), None);
        assert_eq!(get_main_checkpoint(610000).unwrap().0, 610000);
        assert_eq!(get_main_checkpoint(625000).unwrap().0, 610000);
        */
        assert_eq!(get_test_checkpoint(300000), None);
        assert_eq!(get_test_checkpoint(500000).unwrap().0, 350000);
        assert_eq!(get_test_checkpoint(525000).unwrap().0, 350000);
        assert_eq!(get_test_checkpoint(550000).unwrap().0, 550000);
        assert_eq!(get_test_checkpoint(655000).unwrap().0, 550000);

        assert_eq!(get_main_checkpoint(500000), None);
        assert_eq!(get_main_checkpoint(600000).unwrap().0, 600000);
        assert_eq!(get_main_checkpoint(625000).unwrap().0, 600000);
        assert_eq!(get_main_checkpoint(630000).unwrap().0, 630000);
        assert_eq!(get_main_checkpoint(635000).unwrap().0, 630000);

        
    }

}